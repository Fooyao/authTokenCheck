name: Build and Release

# 触发条件：当推送tag时自动触发
on:
  push:
    tags:
      - 'v*.*.*'  # 匹配 v1.0.0, v2.1.3 等版本号格式
  workflow_dispatch:  # 允许手动触发

permissions: write-all # 给所有工作写权限

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build for multiple platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义需要编译的目标平台
        include:
          - goos: windows
            goarch: amd64
            suffix: .exe
            name: windows-amd64
          - goos: windows
            goarch: 386
            suffix: .exe
            name: windows-386
          - goos: linux
            goarch: amd64
            suffix: ''
            name: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: ''
            name: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: ''
            name: macos-amd64
          - goos: darwin
            goarch: arm64
            suffix: ''
            name: macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: |
        # 检查是否有测试文件，如果没有则跳过
        if find . -name "*_test.go" -print -quit | grep -q .; then
          go test -v ./...
        else
          echo "No test files found, skipping tests"
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        output_name="twitter-checker-${{ matrix.name }}${{ matrix.suffix }}"
        echo "Building ${output_name} for ${{ matrix.goos }}/${{ matrix.goarch }}"
        
        go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o "dist/${output_name}" main.go
        
        if [ ! -f "dist/${output_name}" ]; then
          echo "Error: Failed to create ${output_name}!"
          exit 1
        fi
        
        echo "Successfully built: ${output_name}"
        ls -la dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: twitter-checker-${{ matrix.name }}
        path: dist/
        retention-days: 5

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir -p release
        echo "Downloaded artifacts:"
        find artifacts -type f -name "twitter-checker-*"
        
        # 直接复制所有二进制文件到release目录
        find artifacts -type f -name "twitter-checker-*" -exec cp {} release/ \;
        
        echo "Release files:"
        ls -la release/
        
        # 验证是否有文件
        if [ -z "$(ls -A release/)" ]; then
          echo "Error: No release files found!"
          echo "Artifacts structure:"
          find artifacts -type f
          exit 1
        fi

    - name: Generate checksums
      run: |
        cd release
        sha256sum * > checksums.txt
        echo "Generated checksums:"
        cat checksums.txt

    - name: Extract release notes
      id: extract_notes
      run: |
        # 尝试从CHANGELOG.md或git提交中提取发布说明
        if [ -f "CHANGELOG.md" ]; then
          # 提取当前版本的更新日志
          awk '/^## \[?'${GITHUB_REF#refs/tags/}'/{flag=1;next}/^## \[?[0-9]/{flag=0}flag' CHANGELOG.md > release_notes.txt
        else
          # 使用git提交信息作为发布说明
          echo "## 更新内容" > release_notes.txt
          echo "" >> release_notes.txt
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "## 下载说明" >> release_notes.txt
          echo "直接下载对应平台的二进制文件：" >> release_notes.txt
          echo "- **Windows用户**: 下载 \`twitter-checker-windows-*.exe\`" >> release_notes.txt
          echo "- **Linux用户**: 下载 \`twitter-checker-linux-*\` (无扩展名)" >> release_notes.txt
          echo "- **macOS用户**: 下载 \`twitter-checker-macos-*\` (无扩展名)" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "## 使用方法" >> release_notes.txt
          echo "1. 下载对应平台的二进制文件" >> release_notes.txt
          echo "2. **Linux/macOS**: 添加执行权限 \`chmod +x twitter-checker-*\`" >> release_notes.txt
          echo "3. 运行: \`./twitter-checker-* accounts.txt\` (Linux/macOS) 或双击运行 (Windows)" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "## 校验和" >> release_notes.txt
          echo "请使用 \`checksums.txt\` 文件验证下载文件的完整性。" >> release_notes.txt
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body_path: release_notes.txt
        files: |
          release/*
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update latest release info
      run: |
        echo "✅ Release ${{ github.ref_name }} created successfully!"
        echo "📦 Available downloads:"
        ls -la release/
        echo ""
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" 